{"version":3,"sources":["logo.svg","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","drawer","width","flexShrink","flexDirection","position","drawerPaper","drawerTitle","fontSize","fontWeight","padding","drawerBody","buttonGroup","alignContent","flexGrow","drawerToggle","alignItems","right","top","radius","backgroundColor","zIndex","boxShadow","content","transition","transitions","create","easing","sharp","duration","leavingScreen","marginRight","contentShift","easeOut","enteringScreen","tooltip","height","maxWidth","cameraIcon","L","icon","iconUrl","iconAnchor","popupAnchor","hotSpotIcon","MapDiv","circle","color","fillColor","opacity","props","useState","lat","long","zoom","newRectangle","setNewRectangle","editSwitch","toggleEditSwitch","open","toggleOpen","rectangleClicked","toggleRectangleClicked","classes","toggleDrawer","handleImageLoad","console","log","document","getElementById","style","className","loading","error","clsx","onClick","IconButton","Map","e","newPt","latlng","toFixed","lng","length","initPt","center","TileLayer","cursor","attribution","url","searchArea","Rectangle","bounds","cameras","map","camera","Marker","key","id","hotspot","Popup","onError","target","src","onLoad","name","Drawer","variant","anchor","paper","FormControl","margin","FormLabel","FormControlLabel","label","control","Switch","checked","onChange","inputProps","FormHelperText","FormGroup","row","Button","handleNewRectangle","handleReset","atag","createElement","cameraList","file","Blob","type","href","URL","createObjectURL","download","click","App","data","setData","toggleLoading","setSearchArea","useEffect","fetch","then","res","json","cameraData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,mUCiCrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNC,MAPc,IAQdC,WAAY,EACZH,QAAS,OACTI,cAAe,SACfC,SAAU,YAEZC,YAAa,CACTJ,MAdY,KAgBhBK,YAAa,CACTC,SAAU,OACVC,WAAY,OACZC,QAAS,QAEbC,WAAY,CACRD,QAAS,YAEbE,YAAa,CACTF,QAAS,WACTV,QAAS,OACTa,aAAc,gBACd,WAAY,CACRC,SAAU,IAGlBC,aAAc,CACZf,QAAS,OACTgB,WAAY,SACZX,SAAU,WACVY,MAAO,EACPC,IAAK,EACLC,OAAQ,MACRC,gBAAiB,QACjBC,OAAQ,GACRC,UAAW,oCAEbC,QAAS,CACPT,SAAU,EACVT,SAAU,WACVmB,WAAY1B,EAAM2B,YAAYC,OAAO,SAAU,CAC7CC,OAAQ7B,EAAM2B,YAAYE,OAAOC,MACjCC,SAAU/B,EAAM2B,YAAYI,SAASC,gBAEvCC,aAlDc,KAoDhBC,aAAc,CACZR,WAAY1B,EAAM2B,YAAYC,OAAO,SAAU,CAC7CC,OAAQ7B,EAAM2B,YAAYE,OAAOM,QACjCJ,SAAU/B,EAAM2B,YAAYI,SAASK,iBAEvCH,YAAa,GAEfI,QAAS,CACLnC,QAAS,OACTI,cAAe,SACfF,MAAO,QACP,QAAS,CACLkC,OAAQ,OACRC,SAAU,cAclBC,EAAaC,IAAEC,KAAK,CACpBC,QAAQ,aAERC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAGnBC,EAAcL,IAAEC,KAAK,CACrBC,QAAQ,qBAERC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAgNRE,GA7MFN,IAAEO,OAAO,CAClBC,MAAO,MACPC,UAAW,MACXC,QAAS,IACT9B,OAAQ,MAIG,SAAC+B,GAAW,IAAD,EACUC,mBAAS,CAACC,IAAK,QAASC,MAAO,QAASC,KAAM,KADxD,mBACfjD,EADe,aAEkB8C,mBAAS,KAF3B,mBAEfI,EAFe,KAEDC,EAFC,OAGiBL,oBAAS,GAH1B,mBAGfM,EAHe,KAGHC,EAHG,OAIKP,oBAAS,GAJd,mBAIfQ,EAJe,KAITC,EAJS,OAK6BT,oBAAS,GALtC,mBAKfU,EALe,KAKGC,EALH,OAMeX,oBAAS,GANxB,gCAOeA,oBAAS,IAPxB,mBAShBY,GATgB,UASNnE,KA0BVoE,EAAe,WACjBJ,GAAYD,IAoChB,IAWMM,EAAkB,WACpBC,QAAQC,IAAI,QACZC,SAASC,eAAe,YAAYC,MAAMtE,QAAW,WAGzD,OACI,yBAAKuE,UAAWR,EAAQhE,MACnBmD,EAAMsB,SACH,yBAAKD,UAAU,cACX,yBAAKA,UAAU,eAAf,mBACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,qBAI1BrB,EAAMuB,OACH,yBAAKF,UAAU,cACX,yBAAKA,UAAU,eAAerB,EAAMuB,QAGhD,yBACEF,UAAWG,YAAKX,EAAQxC,QAAT,eACZwC,EAAQ/B,aAAe2B,KAG1B,yBAAKgB,QAASX,EAAcO,UAAWR,EAAQhD,cAC3C,kBAAC6D,EAAA,EAAD,CAAYD,QAASX,GACfL,EAA6B,kBAAC,IAAD,MAAtB,kBAAC,IAAD,QAGf,kBAACkB,EAAA,EAAD,CAAMF,QAnGS,SAACG,GACpB,GAAGrB,EAAY,CACX,IAAIsB,EAAQ,CAACD,EAAEE,OAAO5B,IAAI6B,QAAQ,GAAIH,EAAEE,OAAOE,IAAID,QAAQ,IAI3D,GAFAf,QAAQC,IAAIY,GAEgB,IAAxBxB,EAAa4B,OACb3B,EAAgB,CAACuB,SACd,GAA4B,IAAxBxB,EAAa4B,OAAc,CAClC,IAAIC,EAAS7B,EAAa,GAC1BW,QAAQC,IAAIiB,EAAQL,GACpBvB,EAAgB,CAAC4B,EAAQL,SACO,IAAxBxB,EAAa4B,QAAiBtB,EAE/BA,GACPC,GAAuB,GAFvBN,EAAgB,CAACuB,MAsFU3C,OAAQ,IAAMiD,OAAQ,CAAChF,EAAS+C,IAAK/C,EAASgD,MAAOC,KAAMjD,EAASiD,MAC/F,kBAACgC,EAAA,EAAD,CACAhB,MAAO,CAACiB,OAAQ9B,GAAc,sBAC9B+B,YAAY,0EACZC,IAAI,uDAEwB,IAA3BvC,EAAMwC,WAAWP,QAAe,kBAACQ,EAAA,EAAD,CAAW5C,MAAM,SAAS6C,OAAQ1C,EAAMwC,aAWxExC,EAAM2C,SACP3C,EAAM2C,QAAQC,KAAI,SAAAC,GACd,OACI,kBAACC,EAAA,EAAD,CAAQC,IAAKF,EAAOG,GAAI7F,SAAU,CAAC0F,EAAO3C,IAAK2C,EAAO1C,MAAOb,KAAMuD,EAAOI,QAAUvD,EAAaN,GAC7F,kBAAC8D,EAAA,EAAD,KACI,yBAAK7B,UAAWR,EAAQ5B,SACpB,yBAAK+D,GAAG,WAAW5B,MAAO,CAACtE,QAAS,SAChC,yBAAKqG,QAAS,SAAAvB,GACVA,EAAEwB,OAAOD,QAAU,KACnBvB,EAAEwB,OAAOC,IAAM,YAChBC,OAAQvC,EAAiBsC,IAAG,iBAAYR,EAAOG,OAEtD,6BAAK,wCAAsBH,EAAOG,IAClC,6BAAK,0CAAwBH,EAAOU,cAY5D,kBAACC,EAAA,EAAD,CACInC,UAAWR,EAAQ9D,OACnB0G,QAAQ,aACRC,OAAO,QACPjD,KAAMA,EACNI,QAAS,CACL8C,MAAO9C,EAAQzD,cAGnB,yBAAKiE,UAAWR,EAAQxD,aAAxB,WACA,yBAAKgE,UAAWR,EAAQpD,YACpB,kBAACmG,EAAA,EAAD,CAAaC,OAAQ,UACjB,kBAACC,EAAA,EAAD,2BACA,kBAACC,EAAA,EAAD,CACIC,MAAM,mBACNC,QACI,kBAACC,EAAA,EAAD,CACAC,QAAS5D,EACT6D,SAnKP,SAACxC,GAClBpB,GAAkBD,IAmKMgD,KAAK,WACLc,WAAY,CAAE,aAAc,0BAIpC,kBAACC,EAAA,EAAD,yDACA,kBAACC,EAAA,EAAD,CAAWlD,UAAWR,EAAQnD,YAAa8G,KAAG,GAC1C,kBAACC,EAAA,EAAD,CAAQhD,QA1IX,WACW,IAAxBpB,EAAa4B,SACbjC,EAAM0E,mBAAmBrE,GACzBC,EAAgB,MAuI+BmD,QAAQ,YAAY5D,MAAM,WAAzD,UACA,kBAAC4E,EAAA,EAAD,CAAQhD,QAhJZ,WAChBnB,EAAgB,IAChBN,EAAM2E,eA8I4ClB,QAAQ,aAAtC,UAGJ,kBAACc,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAQhB,QAAQ,YAAY5D,MAAM,YAAY4B,QAjItE,WACI,IACI,IAAImD,EAAO1D,SAAS2D,cAAc,KAC9BC,EAAa,GACjB9E,EAAM2C,QAAQC,KAAI,SAAAC,GAAM,OAAGiC,GAAajC,EAAOG,GAAK,QACpD,IAAI+B,EAAO,IAAIC,KAAK,CAACF,GAAa,CAACG,KAAM,eACzCL,EAAKM,KAAOC,IAAIC,gBAAgBL,GAChCH,EAAKS,SAAW,aAChBT,EAAKU,QACP,MAAO1D,GACLZ,QAAQC,IAAI,2BAuHI,iBCzRbsE,MAhCf,WAAgB,IAAD,EAEWtF,mBAAS,MAFpB,mBAENuF,EAFM,KAEAC,EAFA,OAGoBxF,oBAAS,GAH7B,mBAGNqB,EAHM,KAGGoE,EAHH,OAIuBzF,mBAAS,IAJhC,mBAINuC,EAJM,KAIMmD,EAJN,KAqBb,OAfAC,qBAAU,iBAAI,CACZC,MAAM,QACHC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAE,GACJhF,QAAQC,IAAI+E,GACZP,EAAQO,EAAKC,YACbN,EAAcK,EAAKxD,YACnBkD,GAAc,SAElB,IAOA,yBAAKrE,UAAU,OACX,kBAAC,EAAD,CACEsB,QAAS6C,EACThD,WAAYA,EACZlB,QAASA,MCpBC4E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvF,SAASC,eAAe,SDyHpB,kBAAmBuF,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAxF,GACLP,QAAQO,MAAMA,EAAMyF,c","file":"static/js/main.245da792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\r\nimport { \r\n    Rectangle,\r\n    Map, \r\n    Marker, \r\n    TileLayer, \r\n    Popup, \r\n    Tooltip,\r\n    CircleMarker,\r\n    MapLayer\r\n} from 'react-leaflet';\r\nimport clsx from 'clsx';\r\nimport L from 'leaflet'\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\n\r\n\r\nimport {\r\n    Drawer,\r\n    Switch,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    FormLabel,\r\n    FormControl,\r\n    FormGroup,\r\n    Button,\r\n} from '@material-ui/core'\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      position: 'relative'\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerTitle: {\r\n        fontSize: '24px',\r\n        fontWeight: 'bold',\r\n        padding: '10px'\r\n    },\r\n    drawerBody: {\r\n        padding: '0px 10px'\r\n    },\r\n    buttonGroup: {\r\n        padding: '20px 0px', \r\n        display: 'flex', \r\n        alignContent: 'space-between',\r\n        '& button' :{\r\n            flexGrow: 1\r\n        }\r\n    },\r\n    drawerToggle: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      position: 'absolute',\r\n      right: 0,\r\n      top: 5,\r\n      radius: '5px',\r\n      backgroundColor: 'white',\r\n      zIndex: 10,\r\n      boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2)'\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      position: 'relative',\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      marginRight: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginRight: 0,\r\n    },\r\n    tooltip: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '300px',\r\n        '& img': {\r\n            height: 'auto',\r\n            maxWidth: '300px'\r\n        }\r\n    }\r\n  }));\r\n  \r\nconst polygon = [\r\n    [43.6465, -79.389],\r\n    [43.655, -79.377]\r\n  ]\r\n\r\n\r\nconst prefix = process.env.NODE_ENV === 'development' ? '../': \"./\";\r\n\r\n\r\nvar cameraIcon = L.icon({\r\n    iconUrl: `camera.png`,\r\n    // iconSize: [, 32],\r\n    iconAnchor: [16, 16],\r\n    popupAnchor: [-3, -16],\r\n})\r\n\r\nvar hotSpotIcon = L.icon({\r\n    iconUrl: `hotspot_camera.png`,\r\n    // iconSize: [50, 50],\r\n    iconAnchor: [16, 16],\r\n    popupAnchor: [-3, -16],\r\n})\r\n\r\nvar circle = L.circle({\r\n    color: \"red\",\r\n    fillColor: 'red',\r\n    opacity: 0.75,\r\n    radius: 5000\r\n})\r\n\r\n\r\nconst MapDiv = (props) => {\r\n    const [position, setPosition] = useState({lat: 43.6475, long: -79.3811, zoom: 13})\r\n    const [newRectangle, setNewRectangle] = useState([])\r\n    const [editSwitch, toggleEditSwitch] = useState(true)\r\n    const [open, toggleOpen] = useState(false)\r\n    const [rectangleClicked, toggleRectangleClicked] = useState(false)\r\n    const [popupShow, togglePopupShow] = useState(false)\r\n    const [showImage, toggleShowImage] = useState(false)\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleSwitch = (e) => {\r\n        toggleEditSwitch(!editSwitch)\r\n    }\r\n\r\n    const handleMapClick = (e) => {\r\n        if(editSwitch) {\r\n            let newPt = [e.latlng.lat.toFixed(3), e.latlng.lng.toFixed(3)]\r\n            \r\n            console.log(newPt)\r\n\r\n            if (newRectangle.length === 0) {\r\n                setNewRectangle([newPt])\r\n            } else if (newRectangle.length === 1) {\r\n                let initPt = newRectangle[0];\r\n                console.log(initPt, newPt)\r\n                setNewRectangle([initPt, newPt])\r\n            } else if ((newRectangle.length === 2 && !rectangleClicked)) {\r\n                setNewRectangle([newPt])\r\n            } else if (rectangleClicked) {\r\n                toggleRectangleClicked(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    const toggleDrawer = () => {\r\n        toggleOpen(!open)\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setNewRectangle([])\r\n        props.handleReset()\r\n    }\r\n\r\n    const handleUpdate = () => {\r\n        if (newRectangle.length === 2) {\r\n            props.handleNewRectangle(newRectangle);\r\n            setNewRectangle([])\r\n        }\r\n\r\n    }\r\n\r\n    const handleRectangleClick = (e) => {\r\n        toggleRectangleClicked(true)\r\n        console.log(\"click rectangle\", e)\r\n        \r\n    }\r\n\r\n    function downloadContent() {\r\n        try {\r\n            var atag = document.createElement(\"a\");\r\n            var cameraList = ''\r\n            props.cameras.map(camera =>cameraList+=(camera.id + '\\n'))\r\n            var file = new Blob([cameraList], {type: 'text/plain'});\r\n            atag.href = URL.createObjectURL(file);\r\n            atag.download = 'cameraList';\r\n            atag.click();\r\n        } catch (e) {\r\n            console.log(\"Error Exporting Data\")\r\n        }\r\n      }\r\n\r\n    const getImage = (id) => {\r\n        console.log('getImage')\r\n        fetch(`image/${id}`)\r\n            .then(res=>{\r\n                console.log(\"res\", res)\r\n                if (res.ok) {\r\n                    document.getElementById(`cameraImage`+id).src = `image/592`\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleImageLoad = () => {\r\n        console.log(\"load\")\r\n        document.getElementById('imageDiv').style.display = ('inherit')\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.loading && \r\n                <div className=\"spinnerDiv\">\r\n                    <div className=\"spinnerText\">Loading Cameras</div>\r\n                    <div className=\"spinner\">\r\n                        <div className=\"double-bounce1\"></div>\r\n                        <div className=\"double-bounce2\"></div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {props.error && \r\n                <div className=\"spinnerDiv\">\r\n                    <div className=\"spinnerText\">{props.error}</div>\r\n                </div>\r\n            }\r\n        <div\r\n          className={clsx(classes.content, {\r\n            [classes.contentShift]: open,\r\n          })}\r\n        >\r\n          <div onClick={toggleDrawer} className={classes.drawerToggle}>\r\n              <IconButton onClick={toggleDrawer}>\r\n                  {!open ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n            </IconButton>\r\n          </div>\r\n            <Map  onClick={handleMapClick} height={100}  center={[position.lat, position.long]} zoom={position.zoom}>\r\n                <TileLayer\r\n                style={{cursor: editSwitch && \"pointer !important\" }}\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {props.searchArea.length ===2 && <Rectangle color=\"purple\" bounds={props.searchArea} />}\r\n                {/* {props.searchArea.length ===2 && <Rectangle color=\"purple\" bounds={props.searchArea} />}\r\n                {newRectangle.length === 1 && <CircleMarker color=\"red\" opacity={1} radius={2} center={newRectangle[0]}></CircleMarker>}\r\n                {newRectangle.length === 2 && \r\n                <Rectangle onClick={handleRectangleClick} color=\"red\" bounds={newRectangle}>\r\n                    <Popup>\r\n                        <Button onClick={handleUpdate} >Update Search</Button>\r\n                    </Popup>\r\n                </Rectangle>\r\n                }*/}\r\n\r\n                {props.cameras && \r\n                props.cameras.map(camera=>{\r\n                    return (\r\n                        <Marker key={camera.id} position={[camera.lat, camera.long]} icon={camera.hotspot ? hotSpotIcon: cameraIcon}>\r\n                            <Popup >\r\n                                <div className={classes.tooltip}>\r\n                                    <div id=\"imageDiv\" style={{display: 'none'}}>\r\n                                        <img onError={e=>{\r\n                                            e.target.onError = null;\r\n                                            e.target.src = '/NoImage'\r\n                                        }} onLoad={handleImageLoad} src={`/image/${camera.id}`}/>\r\n                                    </div>\r\n                                    <div><strong>ID: </strong>{camera.id}</div>\r\n                                    <div><strong>Name: </strong>{camera.name}</div>\r\n                                </div>\r\n                            </Popup>\r\n                        </Marker>\r\n                    )\r\n                })\r\n\r\n                } \r\n                \r\n                \r\n            </Map>\r\n            </div>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                  }}\r\n                >\r\n                <div className={classes.drawerTitle}>Toolbar</div>\r\n                <div className={classes.drawerBody}>\r\n                    <FormControl margin={\"normal\"}>\r\n                        <FormLabel>Change Search Area</FormLabel>\r\n                        <FormControlLabel\r\n                            label=\"Toggle Area Edit\"\r\n                            control={\r\n                                <Switch\r\n                                checked={editSwitch}\r\n                                onChange={handleSwitch}\r\n                                name=\"checkedA\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                            }\r\n                        />\r\n                        <FormHelperText>Select two points to create new search rectangle</FormHelperText>    \r\n                        <FormGroup className={classes.buttonGroup} row>\r\n                            <Button onClick={handleUpdate} variant=\"contained\" color=\"primary\">Update</Button>\r\n                            <Button onClick={handleClear} variant=\"contained\">Clear</Button>\r\n\r\n                        </FormGroup>                \r\n                        <FormGroup>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={downloadContent}>Export</Button>\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapDiv;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Map from './components/Map.js'\n\nfunction App() {\n\n  const [data, setData] = useState(null)\n  const [loading, toggleLoading] = useState(true)\n  const [searchArea, setSearchArea] = useState([])\n\n  useEffect(()=>[\n    fetch('/api')\n      .then(res=>res.json())\n      .then(json=>{\n        console.log(json)\n        setData(json.cameraData);\n        setSearchArea(json.searchArea);\n        toggleLoading(false);\n      })\n  ],[])\n\n  const getData = () => {\n    \n  }\n\n  return (\n    <div className=\"App\">\n        <Map \n          cameras={data}\n          searchArea={searchArea}\n          loading={loading}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}